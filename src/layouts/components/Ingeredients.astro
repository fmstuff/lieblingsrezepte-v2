---
import Button from "./Button.astro";
export interface Props {
  servings: number;
  ingredients: {
    title: string;
    amount: number;
    unit: string;
  }[];
}

const { ingredients, servings } = Astro.props as Props;
---

<recipe-list data-servings={servings}>
  <div>
    <h2>Zutaten</h2>
    <p class="mt-4 text-lg text-gray-500">
      Portionen: <span id="numServings">?</span>
      <Button id="minusButton">-</Button>
      <Button id="plusButton">+</Button>
    </p>
    <table class="mt-4 table-auto border-separate border-spacing-x-4">
      <thead>
        <tr>
          <th class="text-right">Menge</th>
          <th class="text-left">Zutat</th>
        </tr>
      </thead>
      <tbody>
        {
          ingredients.map(
            (ingredient: { title: string; amount: number; unit: string }) => (
              <tr class="odd:bg-slate-100">
                <td class="text-right">
                  <span
                    class="ingredientAmount"
                    data-initial-amount={ingredient.amount && ingredient.amount}
                  >
                    ??
                  </span>
                  {ingredient.unit && " " + ingredient.unit}
                </td>
                <td>{ingredient.title}</td>
              </tr>
            )
          )
        }
      </tbody>
    </table>
  </div>
</recipe-list>

<script>
  class RecipeList extends HTMLElement {
    constructor() {
      super();
      const initialServings = parseInt(this.dataset.servings ?? "1");

      const numServingsSpan = this.querySelector("#numServings")!;
      const plusButton = this.querySelector("#plusButton")!;
      const minusButton = this.querySelector("#minusButton")!;
      const ingredientAmountSpans = this.querySelectorAll(".ingredientAmount")!;

      numServingsSpan.textContent = initialServings.toString();
      ingredientAmountSpans.forEach((ingredientAmountSpan) => {
        const amount = ingredientAmountSpan.getAttribute("data-initial-amount");
        ingredientAmountSpan.textContent = amount ?? "";
      });

      const updateIngredientAmountSpans = (newNumServings: number) => {
        ingredientAmountSpans.forEach((ingredientAmount) => {
          const initialAmount = ingredientAmount.getAttribute(
            "data-initial-amount"
          );
          if (initialAmount) {
            const updatedAmount =
              (parseFloat(initialAmount) * newNumServings) / initialServings;
            ingredientAmount.textContent = updatedAmount.toString();
          }
        });
      };

      plusButton.addEventListener("click", () => {
        if (parseInt(numServingsSpan.textContent!) === 15) {
          return;
        }
        const newNumServings = parseInt(numServingsSpan.textContent!) + 1;
        numServingsSpan.textContent = newNumServings.toString();

        updateIngredientAmountSpans(newNumServings);
      });

      minusButton.addEventListener("click", () => {
        if (parseInt(numServingsSpan.textContent!) === 1) {
          return;
        }
        const newNumServings = parseInt(numServingsSpan.textContent!) - 1;
        numServingsSpan.textContent = newNumServings.toString();

        updateIngredientAmountSpans(newNumServings);
      });
    }
  }

  customElements.define("recipe-list", RecipeList);
</script>
